Selenium is a tool that automates user-level browser interaction for testing: opening web pages, filling in forms, and verifying the resulting page says what you'd expect. It's written in Java, but has bindings in lots of languages; this article focuses on writing tests in Python.

I'm a web dev with about six weeks' experience working with Selenium; this introduction aims to cover the basics of writing maintainable Selenium tests, for developers looking to automate a little QA on projects of their own.

## Part 1: Intro to Selenium

Selenium automates browsers. There are two Selenium APIs: the original RC API, which used JavaScript and a Java applet to control the browser; and the newer WebDriver API, which uses OS-level automation to inject JavaScript (for instance, AppleScript on Mac OS). _todo verify this is actually accurate_

If you convert manual QA tests into scripts, the natural next step is to try to run those scripts on as many OS/browser combinations as possible. You can start by using browsers installed on your dev machine, wire up a bunch of machines or VMs using Selenium Grid (warning: requires a lot of setup, as Java apps often do), or use a service like Sauce Labs, which provides cloud-based browsers on demand, plus some nice extras like videos of the test runs.

Having an automatable browser is a huge thing for testing web apps. We're currently using Selenium in a couple of ways: 

- **Selenium tests as backup monitoring solution:** we have a browser trying to log into production on a five-minute cron, as a high-level complement to our pretty minimal lower-level nagios monitors
- **Selenium tests as pull request sanity check:** we are an open source project, which means we can (and do) use Travis-CI to automatically run unit tests against github pull requests. We added Selenium tests to this; see [below](#footy) for details.
- **Selenium tests for QA automation:** Since QA testers click around in browsers, and Selenium tests click around in browsers, you can replace repetitive manual testing with a Selenium script that runs across OS/browser combinations. This is the usual use of Selenium, and it's what we'll be focused on for the rest of this article.

Okay, enough talk. Let's see some code.

Note that you can kick off a python-selenium session from the python shell. It's pretty much the most amazing thing ever, the first time you do it. It's also an incredibly useful debugging tool: as we'll mention later, if a Selenium test fails, you can have it drop you into a pdb session, which lets you examine the state of things, rather than trying to read a stacktrace.

Aight. If you have firefox on your system, all you have to do is install the python bits. I'm going to use virtualenv to avoid installing packages at top-level on my machine; check out the virtualenv project for more, if this is new to you.

    ]$ virtualenv env
    ]$ . env/bin/activate
    (env) ]$ 

Install the selenium package using pip, and you're all set:

    (env) ]$ pip install selenium
 
Let's fire up a python repl and import webdriver:

    (env) ]$ python
    Python 2.7.1 (r271:86832, Aug  5 2011, 03:30:24) 
    [GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
    Type "help", "copyright", "credits" or "license" for more information.
    >>> from selenium import webdriver

Here comes the magic. Fire up a Firefox window and take control of it:

    >>> driver = webdriver.Firefox()

Yes, shit just got realer. Let's actually do something with that window.

Rather than take you to Google or something--which, btw, you could do really easily:

    >>> driver.get('http://www.google.com')

I'm going to run through some simple interactions on browserid's demo site, 123done.org. Because we have a bunch of really nicely-written code in our github repo, you'll be able to flip back and forth to see how we go from this naive code, to cleaner code, to really nice abstractions.

Okay. Fire up 123done:

    >>> driver.get('http://dev.123done.org/')

Now, we want to log in, but we want to wait until the login code has loaded. We'll do this by telling Selenium to explicitly wait until some condition is satisfied; in this case, until the loading spinner disappears:

    >>> from selenium.webdriver.support.ui import WebDriverWait
    >>> wait_timeout = 5000
    >>> WebDriverWait(driver, wait_timeout).until(
    ...     lambda driver: not driver.find_element_by_css_selector('li.loading img').is_displayed())

Pretty gnarly one-liner, eh? Since we already had the page open, this will just return right away. The WebDriverWaits become more important when you're running these tests programmatically, in which case they are a really nice alternative to something dumb like `sleep(5)`.(**)

There are a couple of other functions for finding elements, but `find_element_by_css_selector` will get us started.

As a sanity check, verify that the page's title is what you expect. Normally, you'll use some unit testing framework or other for the asserts, but here, we'll just use python's built-in `assert` statement:

    >>> assert driver.title == '123done - your tasks, simplified'
    >>>

Sweet! No complaints. By the way, since we're in an interactive session, you could also just ask the driver for the title, and verify manually that it seems ok:

    >>> driver.title
    u'123done - your tasks, simplified'
    >>>

So far, so good. Now, let's go through the signup flow. Persona's signup flow requires you click a link in a verification email. In real life, we automate this using [restmail](https://github.com/lloyd/restmail), an open-source tool that provides a RESTful interface to a throwaway email account. But, to keep things simple right now, we'll just use a real email address, fish out the link by hand, and paste it back into this python session.

To make it easier to copy-and-paste code, I'm leaving out the '>>>' symbol in the rest of the article.

Find and click 'sign up':

    driver.find_element_by_css_selector('#loggedout > button').click()

We're about to switch to the popup, but let's grab a pointer to the parent window first (this is helpful because the parent window doesn't have a `name` attribute)
    
    parent_window = driver.current_window

Switch to the popup, using its `name`, '__persona_dialog'. Let's use WebDriverWait again, this time to wait for the dialog to open by looking for the dialog's title in the list of windows:

    WebDriverWait(driver, 8000).until(
        lambda driver: '__persona_dialog' in driver.window_handles)

Once that WebDriverWait has returned, the popup is ready, so switch to it:

    driver.switch_to_window('__persona_dialog')

And again, as a sanity check, check the popup's title:
    
    assert driver.title == 'Mozilla Persona: A Better Way to Sign In'

Totally awesome. Here's where you'll need to enter **your email** and a dummy password. I'll set them as variables to make it easy to copy and paste:

    test_email = 'YOUR_DUMMY_EMAIL_HERE :-)'
    test_password = 'Secr3tzRkewl'

Arright. Now, have the driver find the email input and enter your email address. Note we're using `find_element_by_id`:

    emailInput = driver.find_element_by_id('email')
    emailInput.clear()
    emailInput.send_keys(test_email)

Then hit 'next' and wait for the second step to load.

    driver.find_element_by_css_selector('button.start').click()
    WebDriverWait(driver, 5000).until(
        lambda driver: driver.find_element_by_id('password').is_displayed())

Fill in the two password fields:

    passwordInput = driver.find_element_by_id('password')
    passwordInput.clear()
    passwordInput.send_keys(test_password)
    verifyPasswordInput = driver.find_element_by_id('vpassword')
    verifyPasswordInput.clear()
    verifyPasswordInput.send_keys(test_password)

Hit the 'done' button:

    driver.find_element_by_id('verify_user').click()

OK. Now you should see the 'check your email' screen. Here's a WebDriverWait that'll do it programmatically, though the selector is pretty gross:

    WebDriverWait(driver, 5000).until(lambda driver: 
        driver.find_element_by_css_selector('#wait .contents h2 + p strong').is_displayed())

You could also just look at the popup ;-)

At this point, look for an email from Persona in your inbox. Copy the verification link and toss it in the python session:

    # don't use my link, use your link!
    verify_link = 'https://login.dev.anosrep.org/verify_email_address?token=pgNgTNEdGyiQfnE3o98mjA2Tai3D55PhHdnwu6FCts8f67nD'

Now, we'll finish up by having Selenium switch back to the main window, open the verification link, then wait for the 'thank you' page to load. After 5 seconds, there's a redirect to the 'account manager' page. We can verify both links in the chain using two WebDriverWaits:

    driver.switch_to_window(parent_window)
    driver.get(verify_link)
    WebDriverWait(driver, 8000).until(
        lambda driver: driver.title == 'Mozilla Persona: Complete Registration')
    WebDriverWait(driver, 12000).until(
        lambda driver: driver.find_element_by_id('manage').is_displayed())

W00t! We've gotten through the signup flow! We *could* go back to 123done and verify that this account now logs in correctly, but it wouldn't introduce anything conceptually different, so it's left as an exercise for the reader.

Stuff we've covered so far:
- **Locating elements on the page** using `webdriver.find_element_by_css_selector()` and `webdriver.find_element_by_id()`
- **Filling in forms** using `webdriver.send_keys()`
- **Waiting for things to happen** using `WebDriverWait(driver, timeout).until(condition)`
- **Switching between windows** using `webdriver.switch_to_window(win)`, where `win` is either the `name` attribute on the window or a window reference supplied by `webdriver.current_window()`
- **Verifying conditions** using Python's built-in `assert`

At this point, you can write Selenium tests with Python, but there's more to cover to make those tests maintainable.

Just for reference, here's everything we did inside one Python script that you can hack on freely:

    #!/usr/bin/env python

    from selenium import webdriver
    from selenium.webdriver.support.ui import WebDriverWait

    # stuff you probably want to change
    test_email = 'YOUR_DUMMY_EMAIL_HERE :-)'
    test_password = 'Secr3tzRkewl'

    def sign_up(self):
        driver = webdriver.Firefox()
        driver.get('http://dev.123done.org/')
        wait_timeout = 5000
        WebDriverWait(driver, wait_timeout).until(
            lambda driver: not driver.find_element_by_css_selector('li.loading img').is_displayed(),
            'Sign in button did not appear')
        assert driver.title == '123done - your tasks, simplified'
        
        driver.find_element_by_css_selector('#loggedout > button').click()
        parent_window = driver.current_window
        WebDriverWait(driver, 8000).until(
            lambda driver: '__persona_dialog' in driver.window_handles,
            'Persona popup did not load')
        
        # switch to the Persona dialog, fill in email, submit
        driver.switch_to_window('__persona_dialog')
        assert driver.title == 'Mozilla Persona: A Better Way to Sign In'
        emailInput = driver.find_element_by_id('email')
        emailInput.clear()
        emailInput.send_keys(test_email)
        driver.find_element_by_css_selector('button.start').click()

        # wait for the next step to load, fill in password, submit
        WebDriverWait(driver, 5000).until(
            lambda driver: driver.find_element_by_id('password').is_displayed(),
            'Password step of registration flow did not load')
        passwordInput = driver.find_element_by_id('password')
        passwordInput.clear()
        passwordInput.send_keys(test_password)
        verifyPasswordInput = driver.find_element_by_id('vpassword')
        verifyPasswordInput.clear()
        verifyPasswordInput.send_keys(test_password)
        driver.find_element_by_id('verify_user').click()

        # you should finally see the success step in the popup
        WebDriverWait(driver, 5000).until(lambda driver: 
            driver.find_element_by_css_selector('#wait .contents h2 + p strong').is_displayed(),
            'Final success step of registration flow did not load')

    # at this point, you have to find the email manually.
    # not going to get into restmail specifics.
    def verify_email(self, verify_link):
        driver.switch_to_window(parent_window)
        driver.get(verify_link)
        WebDriverWait(driver, 8000).until(
            lambda driver: driver.title == 'Mozilla Persona: Complete Registration',
            '"Complete Registration" page did not load')
        WebDriverWait(driver, 12000).until(
            lambda driver: driver.find_element_by_id('manage').is_displayed(),
            '"Complete Registration" page did not redirect to "Account Manager" page')

## Refs
    - Exhaustive, awesome article on WebDriverWait from the Mozilla WebQA team: [https://blog.mozilla.org/webqa/2012/07/12/how-to-webdriverwait/](https://blog.mozilla.org/webqa/2012/07/12/how-to-webdriverwait/)

## <a href="#footy">More about Travis and Selenium:</a>

Travis-CI doesn't give you anyplace to hide your configs, so rather than have Travis kick off Selenium jobs for us, we had to do the following:
1. Travis pings a server, creatively named 'testy'
2. testy uses awsbox to quickly spin up an EC2 instance and deploy the branch from the pull request
3. testy then uses Sauce Labs' browsers in the cloud to run Selenium tests against the EC2 instance running the code
4. testy aggregates test results and ships them back to Travis
5. Travis fails the pull if the Selenium tests failed
It's an awesome system, but definitely has a few moving parts.

